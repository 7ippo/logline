{"version":3,"file":"logline.min.js","sources":["../src/lib/util.js","../src/protocols/interface.js","../src/lib/pool.js","../src/protocols/indexeddb.js","../src/protocols/localstorage.js","../src/protocols/websql.js","../src/logline.js"],"sourcesContent":["// throw out Errors, with global prefix 'Logline: ' ahead of err.message\nexport function throwError(errMessage) {\n    throw new Error('Logline: ' + errMessage);\n}\n","import * as util from '../lib/util';\n\n/**\n * Logline Interface\n * @class Interface\n */\nexport default class Interface {\n    /**\n     * Logline constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     */\n    constructor(namespace) {\n        this._namesapce = namespace;\n    }\n\n    /**\n     * add a log record\n     * @method _reocrd\n     * @private\n     * @parma {String} level - log level\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    _record(level, descriptor, data) {\n        util.throwError('method _record is not implemented.');\n    }\n\n    /**\n     * add a level-info record\n     * @method info\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    info(...args) {\n        this._record('info', ...args);\n    }\n\n    /**\n     * add a level-warn record\n     * @method warn\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    warn(...args) {\n        this._record('warn', ...args);\n    }\n\n    /**\n     * add a level-error record\n     * @method error\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    error(...args) {\n        this._record('error', ...args);\n    }\n\n    /**\n     * add a level-critical record\n     * @method critical\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    critical(...args) {\n        this._record('critical', ...args);\n    }\n\n    /**\n     * initialize protocol\n     * @method init\n     * @static\n     * @param {String} database - database name to use\n     */\n    static init(database) {\n        return true;\n    }\n\n    /**\n     * transform human readable time string, such as '3d', '.3' and '1.2' into Unix timestamp\n     * the default relative time is Date.now(), if no second parameter is provided\n     * @method transTimeFormat\n     * @static\n     * @param {String} time - time string to transform\n     * @param {Number} [relative] - relative time to compare, default Date.now()\n     * @return {Number|NaN} timestamp transformed\n     */\n    static transTimeFormat(time, relative) {\n        // if falsy value or timestamp already, pass it through directly,\n        if (!time || /^\\d{13}$/.test(time)) {\n            return +time;\n        }\n        // incase relative time isn't unix timestamp format,\n        // neither a falsy value which will turned out to be Date.now()\n        if (relative && !/^\\d{13}$/.test(relative)) {\n            throw new TypeError('relative time should be standard unix timestamp');\n        }\n\n        return (relative || Date.now()) - time.replace(/d$/, '') * 24 * 3600 * 1000;\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} from - time from, unix timestamp\n     * @param {String} to - time end, unix timestamp\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        util.throwError('method get is not implemented.');\n    }\n\n    /**\n     * clean logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {Number} daysToMaintain - keep logs within days\n     */\n    static keep(daysToMaintain) {\n        util.throwError('method keep is not implemented.');\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     */\n    static clean() {\n        util.throwError('method clean is not implemented.');\n    }\n\n    /**\n     * protocol status map\n     * @prop {Object} STATUS\n     */\n    static get STATUS() {\n        return {\n            INITING: 1,\n            INITED: 2,\n            FAILED: 4\n        };\n    }\n}\n","/**\n * Pool, for storage of async calling\n * @class Pool\n */\nexport default class Pool {\n    /**\n     * Pool constructor\n     * @constructor\n     */\n    constructor() {\n        this._pool = [];\n    }\n\n    /**\n     * add an procedure\n     * @method push\n     * @param {Function} handler - procedure handler\n     * @param {Object} context - procedure context\n     */\n    push(handler, context) {\n        handler.context = context;\n        this._pool.push(handler);\n    }\n\n    /**\n     * consume pool\n     * @method consume\n     */\n    consume() {\n        var handler;\n        while ((handler = this._pool.shift())) {\n            handler.call(handler.context);\n        }\n    }\n}\n","import LoggerInterface from './interface';\nimport Pool from '../lib/pool';\nimport * as util from '../lib/util';\n\n/**\n * IndexedDB protocol\n * @class IndexedDBLogger\n */\nexport default class IndexedDBLogger extends LoggerInterface {\n    /**\n     * IndexedDB protocol constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     */\n    constructor(...args) {\n        super(...args);\n    }\n\n    /**\n     * add a log record\n     * @method _reocrd\n     * @private\n     * @parma {String} level - log level\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    _record(level, descriptor, data) {\n        if (IndexedDBLogger.status !== LoggerInterface.STATUS.INITED) {\n            IndexedDBLogger._pool.push(() => this._record(level, descriptor, data));\n            if (IndexedDBLogger.status !== LoggerInterface.STATUS.INITING) {\n                IndexedDBLogger.init();\n            }\n            return;\n        }\n\n        let transaction = IndexedDBLogger.db.transaction(['logs'], IDBTransaction.READ_WRITE || 'readwrite');\n        transaction.onerror = event => util.throwError(event.target.error);\n\n        let store = transaction.objectStore('logs');\n        let request = store.add({\n            time: Date.now(),\n            namespace: this._namesapce,\n            descriptor: descriptor,\n            data: data\n        });\n\n        request.onerror = event => {\n            IndexedDBLogger.status = LoggerInterface.STATUS.FAILED;\n            util.throwError(event.target.error);\n        };\n    }\n\n    /**\n     * initialize protocol\n     * @method init\n     * @static\n     * @param {String} database - database name to use\n     */\n    static init(database) {\n        if (!IndexedDBLogger.support) {\n            util.throwError('your platform does not support indexeddb protocol.');\n        }\n\n        if (IndexedDBLogger.status) {\n            return false;\n        }\n\n        IndexedDBLogger._pool = IndexedDBLogger._pool || new Pool();\n        IndexedDBLogger._database = database || 'logline';\n        IndexedDBLogger.status = super.STATUS.INITING;\n\n        IndexedDBLogger.request = window.indexedDB.open(IndexedDBLogger._database);\n        IndexedDBLogger.request.onerror = event => util.throwError('protocol indexeddb is prevented.');\n        IndexedDBLogger.request.onsuccess = event => {\n            IndexedDBLogger.db = event.target.result;\n            IndexedDBLogger.status = super.STATUS.INITED;\n            IndexedDBLogger._pool.consume();\n            // globally handle db request errors\n            IndexedDBLogger.db.onerror = event => util.throwError(event.target.error);\n        };\n        IndexedDBLogger.request.onupgradeneeded = event => {\n            // init dabasebase\n            let db = event.target.result, store = db.createObjectStore('logs', { autoIncrement: true });\n            store.createIndex('namespace', 'namespace', { unique: false });\n            store.createIndex('level', 'level', { unique: false });\n            store.createIndex('descriptor', 'descriptor', { unique: false });\n            store.createIndex('data', 'data', { unique: false });\n        };\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} from - time from, unix time stamp or falsy\n     * @param {String} to - time end, unix time stamp or falsy\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        if (IndexedDBLogger.status !== super.STATUS.INITED) {\n            return IndexedDBLogger._pool.push(() => IndexedDBLogger.get(from, to, readyFn));\n        }\n\n        from = LoggerInterface.transTimeFormat(from);\n        to = LoggerInterface.transTimeFormat(to);\n\n        let store = IndexedDBLogger._getTransactionStore(IDBTransaction.READ_ONLY || 'readonly'),\n            request = store.openCursor(),\n            logs = [];\n\n        request.onsuccess = event => {\n            var cursor = event.target.result;\n            if (cursor) {\n                if ((from && cursor.value.time < from) || (to && cursor.value.time > to)) {\n                    cursor.continue();\n                }\n\n                logs.push({\n                    time: cursor.value.time,\n                    namespace: cursor.value.namespace,\n                    descriptor: cursor.value.descriptor,\n                    data: cursor.value.data\n                });\n                cursor.continue();\n            }\n            else {\n                readyFn(logs);\n            }\n        };\n\n        request.onerror = event => util.throwError('failed to literat on logs from database.');\n    }\n\n    /**\n     * clean logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {Number} daysToMaintain - keep logs within days\n     */\n    static keep(daysToMaintain) {\n        if (IndexedDBLogger.status !== super.STATUS.INITED) {\n            return IndexedDBLogger._pool.push(() => IndexedDBLogger.keep(daysToMaintain));\n        }\n\n        let store = IndexedDBLogger._getTransactionStore(IDBTransaction.READ_WRITE);\n        if (!daysToMaintain) {\n            let request = store.clear().onerror = event => util.throwError(event.target.error);\n        }\n        else {\n            let range = (Date.now() - (daysToMaintain || 2) * 24 * 3600 * 1000);\n            let request = store.openCursor();\n            request.onsuccess = event => {\n                let cursor = event.target.result;\n                if (cursor && cursor.value.time < range) {\n                    store.delete(cursor.primaryKey);\n                    cursor.continue();\n                }\n            };\n            request.onerror = event => util.throwError('unable to locate logs earlier than ' + daysToMaintain + 'd.');\n        }\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     */\n    static clean() {\n        if (IndexedDBLogger.status !== super.STATUS.INITED) {\n            return IndexedDBLogger._pool.push(() => IndexedDBLogger.clean());\n        }\n\n        // database can be removed only after all connections are closed\n        IndexedDBLogger.db.close();\n        let request = window.indexedDB.deleteDatabase(IndexedDBLogger._database);\n        request.onerror = event => util.throwError(event.target.error);\n        /* eslint no-unused-vars: \"off\" */\n        request.onsuccess = event => {\n            delete IndexedDBLogger.status;\n            delete IndexedDBLogger.db;\n        };\n    }\n\n    /**\n     * get internal transaction store\n     * @method _getTransactionStore\n     * @private\n     * @static\n     * @param {String} mode - transaction mode\n     * @return {Object} - internal object store\n     */\n    static _getTransactionStore(mode) {\n        if (IndexedDBLogger.db) {\n            let transaction = IndexedDBLogger.db.transaction(['logs'], mode || IDBTransaction.READ_WRITE || 'readwrite');\n            transaction.onerror = event => util.throwError(event.target.error);\n            return transaction.objectStore('logs');\n        }\n        else {\n            util.throwError('log database is not created or connections are closed, considering init it.');\n        }\n    }\n\n    /**\n     * detect support situation\n     * @prop {Boolean} support\n     */\n    static get support() {\n        return !!(window.indexedDB && window.IDBTransaction && window.IDBKeyRange);\n    }\n}\n","import LoggerInterface from './interface';\nimport * as util from '../lib/util';\n\n/**\n * Localstorage protocol\n * @class LocalStorageLogger\n */\nexport default class LocalStorageLogger extends LoggerInterface {\n    /**\n     * Localstorage protocol constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     */\n    constructor(...args) {\n        super(...args);\n    }\n\n    /**\n     * add a log record\n     * @method _reocrd\n     * @private\n     * @parma {String} level - log level\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    _record(level, descriptor, data) {\n        var logs = window.localStorage.getItem(LocalStorageLogger._database) ? JSON.parse(window.localStorage.getItem(LocalStorageLogger._database)) : [];\n        logs.push([\n            Date.now(),\n            this._namesapce,\n            level,\n            descriptor,\n            data\n        ]);\n        try {\n            window.localStorage.setItem(LocalStorageLogger._database, JSON.stringify(logs));\n        } catch (e) { util.throwError('error inserting record'); }\n    }\n\n    /**\n     * initialize protocol\n     * @method init\n     * @static\n     * @param {String} database - database name to use\n     */\n    static init(database) {\n        if (!LocalStorageLogger.support) {\n            util.throwError('your platform does not support localstorage protocol.');\n        }\n        LocalStorageLogger._database = database || 'logline';\n        if (!window.localStorage.getItem(LocalStorageLogger._database)) {\n            window.localStorage.setItem(LocalStorageLogger._database, JSON.stringify([]));\n        }\n        LocalStorageLogger.status = super.STATUS.INITED;\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} from - time from, unix time stamp or falsy\n     * @param {String} to - time end, unix time stamp or falsy\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        var logs = JSON.parse(window.localStorage.getItem(LocalStorageLogger._database)), i;\n\n        from = LoggerInterface.transTimeFormat(from);\n        to = LoggerInterface.transTimeFormat(to);\n\n        for (i = 0; i < logs.length; i++) {\n            if ((from && logs[i][0] < from) || (to && logs[i][0] > to)) {\n                continue;\n            }\n\n            logs[i] = {\n                time: logs[i][0],\n                namespace: logs[i][1],\n                level: logs[i][2],\n                descriptor: logs[i][3],\n                data: logs[i][4]\n            };\n        }\n        readyFn(logs);\n    }\n\n    /**\n     * clean logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {Number} daysToMaintain - keep logs within days\n     */\n    static keep(daysToMaintain) {\n        var logs = !daysToMaintain ? [] : (window.localStorage.getItem(LocalStorageLogger._database) ? JSON.parse(window.localStorage.getItem(LocalStorageLogger._database)) : []).filter(log => {\n            return log.time >= (Date.now() - (daysToMaintain || 2) * 24 * 3600 * 1000);\n        });\n        window.localStorage.setItem(LocalStorageLogger._database, JSON.stringify(logs));\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     */\n    static clean() {\n        delete LocalStorageLogger.status;\n        window.localStorage.removeItem(LocalStorageLogger._database);\n    }\n\n    /**\n     * detect support situation\n     * @prop {Boolean} support\n     */\n    static get support() {\n        return 'localStorage' in window;\n    }\n}\n","import LoggerInterface from './interface';\nimport Pool from '../lib/pool';\nimport * as util from '../lib/util';\n\n/**\n * Websql protocol\n * @class WebsqlLogger\n */\nexport default class WebsqlLogger extends LoggerInterface {\n    /**\n     * Websql logline constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     */\n    constructor(...args) {\n        super(...args);\n    }\n\n    /**\n     * add a log record\n     * @method _reocrd\n     * @private\n     * @parma {String} level - log level\n     * @param {String} descriptor - to speed up search and improve understanding\n     * @param {Mixed} [data] - additional data\n     */\n    _record(level, descriptor, data) {\n        if (WebsqlLogger.status !== LoggerInterface.STATUS.INITED) {\n            WebsqlLogger._pool.push(() => this._record(level, descriptor, data));\n            if (WebsqlLogger.status !== LoggerInterface.STATUS.INITING) {\n                WebsqlLogger.init();\n            }\n            return;\n        }\n\n        try {\n            WebsqlLogger._db.transaction(tx => {\n                tx.executeSql(\n                    'INSERT INTO logs (time, namespace, level, descriptor, data) VALUES(?, ?, ?, ? ,?)',\n                    [Date.now(), this._namesapce, level, descriptor, (data === undefined || data === '') ? '' : (JSON.stringify(data) || '')],\n                    () => {/* empty func */},\n                    (tx, e) => { throw e.message; }\n                );\n            });\n        } catch (e) { util.throwError('error inserting record'); }\n    }\n\n    /**\n     * initialize protocol\n     * @method init\n     * @static\n     * @param {String} database - database name to use\n     */\n    static init(database) {\n        if (!WebsqlLogger.support) {\n            util.throwError(new Error('your platform does not support websql protocol.'));\n        }\n\n        if (WebsqlLogger.status) {\n            return false;\n        }\n\n        WebsqlLogger._pool = WebsqlLogger._pool || new Pool();\n        WebsqlLogger._database = database || 'logline';\n        WebsqlLogger.status = super.STATUS.INITING;\n\n        try {\n            WebsqlLogger._db = window.openDatabase(WebsqlLogger._database, '1.0', 'cats loves logs', 4.85 * 1024 * 1024);\n            WebsqlLogger._db.transaction(tx => {\n                tx.executeSql(\n                    'CREATE TABLE IF NOT EXISTS logs (time, namespace, level, descriptor, data)', [],\n                    () => {\n                        WebsqlLogger.status = super.STATUS.INITED;\n                        WebsqlLogger._pool.consume();\n                    },\n                    () => {\n                        WebsqlLogger.status = super.STATUS.FAILED;\n                    }\n                );\n            });\n        } catch (e) { util.throwError('unable to init log database.'); }\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} from - time from, unix time stamp or falsy\n     * @param {String} to - time end, unix time stamp or falsy\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        if (WebsqlLogger.status !== super.STATUS.INITED) {\n            return WebsqlLogger._pool.push(() => WebsqlLogger.get(from, to, readyFn));\n        }\n\n        from = LoggerInterface.transTimeFormat(from);\n        to = LoggerInterface.transTimeFormat(to);\n\n        try {\n            WebsqlLogger._db.transaction(function(tx) {\n                tx.executeSql(\n                    'SELECT * FROM logs ORDER BY time DESC', [],\n                    (tx, res) => {\n                        var logs = [], line, index = res.rows.length, item;\n                        while (--index >= 0) {\n                            item = res.rows.item(index);\n                            if ((from && item.time < from) || (to && item.time > to)) {\n                                continue;\n                            }\n\n                            // in some devices, properties are configureable: false, writable: false\n                            // we need deep copy\n                            line = JSON.parse(JSON.stringify(item));\n                            // incase data is an object, not a string\n                            try { line.data = JSON.parse(line.data); }\n                            catch (e) {/* leave line.data as it be */}\n                            logs.push(line);\n                        }\n                        readyFn(logs);\n                    },\n                    (tx, e) => { throw e.message; }\n                );\n            });\n        } catch (e) { util.throwError('unable to collect logs from database.'); }\n    }\n\n    /**\n     * clean logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {Number} daysToMaintain - keep logs within days\n     */\n    static keep(daysToMaintain) {\n        if (WebsqlLogger.status !== super.STATUS.INITED) {\n            return WebsqlLogger._pool.push(() => WebsqlLogger.keep(daysToMaintain));\n        }\n\n        try {\n            WebsqlLogger._db.transaction(function(tx) {\n                if (daysToMaintain) {\n                    tx.executeSql(\n                        'DELETE FROM logs WHERE time < ?',\n                        [Date.now() - (daysToMaintain || 2) * 24 * 3600 * 1000],\n                        function() {/* empty func */},\n                        function(tx, e) {throw e.message;}\n                    );\n                }\n                else {\n                    tx.executeSql(\n                        'DELETE FROM logs', [],\n                        () => {/* empty func */},\n                        (tx, e) => { throw e.message; }\n                    );\n                }\n            });\n        } catch (e) { util.throwError('unable to clean logs from database.'); }\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     */\n    static clean() {\n        if (WebsqlLogger.status !== super.STATUS.INITED) {\n            WebsqlLogger._pool.push(() => WebsqlLogger.clean());\n            return;\n        }\n\n        try {\n            WebsqlLogger._db.transaction(tx => {\n                tx.executeSql(\n                    'DROP TABLE logs', [],\n                    () => {\n                        delete WebsqlLogger.status;\n                    },\n                    (tx, e) => { throw e.message; }\n                );\n            });\n        } catch (e) { util.throwError('unable to clean log database.'); }\n    }\n\n    /**\n     * detect support situation\n     * @prop {Boolean} support\n     */\n    static get support() {\n        return 'openDatabase' in window;\n    }\n}\n","import Interface from './protocols/interface';\nimport IndexeddbLogger from './protocols/indexeddb';\nimport LocalstorageLogger from './protocols/localstorage';\nimport WebsqlLogger from './protocols/websql';\nimport * as util from './lib/util';\n\n\nclass Logline {\n    /**\n     * Logline constructor\n     * @constructor\n     * @param {String} namespace - namespace to use\n     * @return {Object Protocol Instance}\n     */\n    constructor(namespace) {\n        Logline._checkProtocol();\n        return new Logline._protocol(namespace);\n    }\n\n    /**\n     * choose a protocol to initialize\n     * @method _initProtocol\n     * @private\n     * @static\n     * @param {Object Protocol Class} protocol - protocol to use, must under Logline.PROTOCOL\n     * @return {Object} Logline\n     */\n    static _initProtocol(protocol) {\n        Logline._protocol = protocol;\n        Logline._protocol.init(Logline._database || 'logline');\n    }\n\n    /**\n     * check protocol\n     * if no protocol is chosen, will try to choose an available one automatically\n     * if none of the protocols is available, an error will be thrown\n     * @method _checkProtocol\n     * @private\n     * @static\n     */\n    static _checkProtocol() {\n        if (!Logline._protocol) {\n            let protocols = Object.keys(Logline.PROTOCOL), protocol;\n            while ((protocol = Logline.PROTOCOL[protocols.shift()])) {\n                if (protocol.support) {\n                    Logline._initProtocol(protocol);\n                    return;\n                }\n            }\n\n            throw new Error(protocols.join(', ').toLowerCase() + ' protocols are not supported on this platform');\n        }\n    }\n\n    /**\n     * get logs in range\n     * if from and end is not defined, will fetch full log\n     * @method get\n     * @static\n     * @param {String} [from] - time from\n     * @param {String} [to] - time end\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static get(from, to, readyFn) {\n        var now = Date.now();\n        Logline._checkProtocol();\n\n        switch (arguments.length) {\n            case 1:\n                readyFn = from;\n                from = undefined;\n                break;\n            case 2:\n                readyFn = to;\n                to = undefined;\n                break;\n            case 3:\n            default:\n                break;\n        }\n\n        Logline._protocol.get(from, to, readyFn);\n    }\n\n    /**\n     * read all logs\n     * @method all\n     * @static\n     * @param {Function} readyFn - function to call back with logs as parameter\n     */\n    static all(readyFn) {\n        Logline.get(readyFn);\n    }\n\n    /**\n     * clean up logs = keep limited logs\n     * @method keep\n     * @static\n     * @param {String} daysToMaintain - specialfy days to keep, support human readable format such as '3d', '.3'\n     * @return {Object} Logline\n     */\n    static keep(daysToMaintain) {\n        Logline._checkProtocol();\n        Logline._protocol.keep(daysToMaintain);\n        return this;\n    }\n\n    /**\n     * delete log database\n     * @method clean\n     * @static\n     * @return {Object} Logline\n     */\n    static clean() {\n        Logline._checkProtocol();\n        Logline._protocol.clean();\n        return this;\n    }\n\n    /**\n     * choose a protocol\n     * @method using\n     * @static\n     * @param {Object Protocol Class} protocol - wanted protocol, should be on of Logline.PROTOCOL\n     * @param {String} [database] - custome database name\n     * @return {Object} Logline\n     */\n    static using(protocol, database) {\n        // protocol unavailable is not allowed\n        if (-1 === [IndexeddbLogger, LocalstorageLogger, WebsqlLogger].indexOf(protocol)) {\n            util.throwError('specialfied protocol ' + (protocol ? (protocol + ' ') : '') + 'is not available');\n        }\n\n        // once protocol is selected, it shall not be changed during runtime\n        if (Logline._protocol) {\n            return this;\n        }\n\n        Logline.database(database || Logline._database);\n        Logline._initProtocol(protocol);\n        return this;\n    }\n\n    /**\n     * specialfy a custome database name, in case of any conflicts\n     * @methd database\n     * @static\n     * @param {String} name - target database name\n     */\n    static database(name) {\n        Logline._database = name;\n    }\n}\n\n// export protocols for modification and mounting\nLogline.PROTOCOL = {\n    INDEXEDDB: IndexeddbLogger,\n    LOCALSTORAGE: LocalstorageLogger,\n    WEBSQL: WebsqlLogger\n};\n\n// export protocol interface for user custom implements\nLogline.INTERFACE = Object.freeze(Interface);\n\nexport default Logline;\n"],"names":["throwError","errMessage","Error","Interface","namespace","_namesapce","level","descriptor","data","args","_record","database","time","relative","test","TypeError","Date","now","replace","from","to","readyFn","daysToMaintain","Pool","_pool","handler","context","push","this","shift","call","IndexedDBLogger","status","LoggerInterface","STATUS","INITED","_this2","INITING","init","transaction","db","IDBTransaction","READ_WRITE","onerror","util","event","target","error","store","objectStore","request","add","FAILED","support","_database","babelHelpers.get","window","indexedDB","open","onsuccess","result","consume","onupgradeneeded","createObjectStore","autoIncrement","createIndex","unique","get","transTimeFormat","_getTransactionStore","READ_ONLY","openCursor","logs","cursor","value","continue","keep","range","delete","primaryKey","clear","clean","close","deleteDatabase","mode","IDBKeyRange","LocalStorageLogger","localStorage","getItem","JSON","parse","setItem","stringify","e","i","length","filter","log","removeItem","WebsqlLogger","_db","executeSql","undefined","tx","message","openDatabase","res","line","item","index","rows","Logline","_checkProtocol","_protocol","protocol","protocols","Object","keys","PROTOCOL","_initProtocol","join","toLowerCase","arguments","IndexeddbLogger","LocalstorageLogger","indexOf","name","INTERFACE","freeze"],"mappings":"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"}